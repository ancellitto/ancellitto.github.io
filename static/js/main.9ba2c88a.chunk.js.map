{"version":3,"sources":["components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderNavItem","item","react_default","a","createElement","className","href","toString","toLowerCase","state","name","items","map","Component","App","id","class","components_Navbar","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA6BeA,qBA1BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,cAAgB,SAACC,GACb,OACIC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAqBC,KAAM,IAAML,EAAKM,WAAWC,eAAiBP,EAA/E,MAPJR,EAAKgB,MAAQ,CACTC,KAAK,cACLC,MAAO,CAAC,SAAS,eAAe,aAAa,cAJlClB,wEAcf,OACIS,EAAAC,EAAAC,cAAA,SAAOC,UAAU,2CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mGACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,SAASV,KAAKa,MAAMC,MACrDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACVT,KAAKa,MAAME,MAAMC,IAAIhB,KAAKI,yBApB9Ba,cC0DNC,mLAtDP,OAEIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2EAA2EU,GAAG,QAC5Fb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,eACAH,EAAAC,EAAAC,cAAA,SAAOY,MAAM,MAAb,yCACAd,EAAAC,EAAAC,cAAA,KAAGY,MAAM,cAAT,gEAMRd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAACa,EAAD,MAEAf,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKW,GAAG,SAASV,UAAU,oBACvBH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kKACAF,EAAAC,EAAAC,cAAA,mKAEJF,EAAAC,EAAAC,cAAA,OAAKW,GAAG,eAAeV,UAAU,oBAC7BH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,kKACAF,EAAAC,EAAAC,cAAA,mKAEJF,EAAAC,EAAAC,cAAA,OAAKW,GAAG,aAAaV,UAAU,oBAC3BH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,kKACAF,EAAAC,EAAAC,cAAA,mKAEJF,EAAAC,EAAAC,cAAA,OAAKW,GAAG,YAAYV,UAAU,oBAC1BH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,kKACAF,EAAAC,EAAAC,cAAA,sKAMhBF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CACXH,EAAAC,EAAAC,cAAA,kCAhDNc,IAAML,WCQJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9ba2c88a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name:'Ancel Litto',\r\n            items: ['Skills','Competencies','Experience','Education']\r\n        }\r\n    }\r\n    renderNavItem = (item) => {\r\n        return (\r\n            <a className=\"nav-item nav-link \" href={\"#\" + item.toString().toLowerCase()} >{item} </a>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <aside className=\"col-12 col-md-2 p-0 bg-light sticky-top\" >\r\n                <nav className=\" navbar navbar-expand navbar-light bg-light flex-row flex-md-column justify-content-between p-0\" >\r\n                    <a className=\"navbar-brand\" href=\"#home\">{this.state.name}</a>\r\n                    <div className=\"navbar-nav flex-row flex-md-column\" >\r\n                        {this.state.items.map(this.renderNavItem)}\r\n                    </div>\r\n                </nav>\r\n            </aside>\r\n        )\r\n    }\r\n}\r\nexport default Navbar\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\n\nclass App extends React.Component {\n    render() {\n        return (\n\n            <div className=\"container-fluid \">\n                {/* Intro */}\n                <header className=\"row min-vh-100 row min-vh-100 justify-content-center align-items-center \" id=\"home\">\n                    <div className=\"text-center\">\n                        <div className=\"display-1\">Ancel Litto</div>\n                        <large class=\"h4\">Polyglot Pragmatic Software Developer</large>\n                        <p class=\"text-muted\">\n                            Java | Spring Boot | Microservice | Vaadin | ReactJs | PWA\n                        </p>\n                    </div>\n                </header>\n\n                <div className=\"row\">\n                    {/* Navigator */}\n                    <Navbar />\n                    {/* Main Content */}\n                    <main className=\"col justify-content-center\">\n                        <div className=\"content text-center\">\n                            <div id=\"skills\" className=\"container-fluid \" >\n                                <h1>Skills</h1>\n                                <p>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!</p>\n                                <p>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!</p>\n                            </div>\n                            <div id=\"competencies\" className=\"container-fluid \" >\n                                <h1>Competencies</h1>\n                                <p>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!</p>\n                                <p>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!</p>\n                            </div>\n                            <div id=\"experience\" className=\"container-fluid \" >\n                                <h1>Experience</h1>\n                                <p>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!</p>\n                                <p>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!</p>\n                            </div>\n                            <div id=\"education\" className=\"container-fluid \" >\n                                <h1>Education</h1>\n                                <p>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!</p>\n                                <p>Try to scroll this section and look at the navigation bar while scrolling! Try to scroll this section and look at the navigation bar while scrolling!</p>\n                            </div>\n                        </div>\n                    </main>\n                </div>\n                {/* Footer */}\n                <footer className=\"row\">\n                    <div className=\"title text-center align-self-center w-100\">\n                        <h2>Contact Me</h2>\n                    </div>\n                </footer>\n            </div>\n        );\n\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}